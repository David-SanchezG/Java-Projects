import java.util.Vector;
public class Polinomio 
{
	
	private Vector pol;
	
	
	public Polinomio()
	{
		//Los polinomios se crean vacios (su vector esta vacio inicialmente) 
		pol = new Vector();
	}
	
	public void annadirMonomio(Monomio mon){
		Monomio aux;
		int i;
		//Comprobamos si hay monomios del mismo grado para agruparlos
		for (i=0; i < pol.size(); i++)
		{
			aux = (Monomio) pol.elementAt(i); //La referencia aux va apuntando a los elementos de las diferentes posiciones del vector
			if(aux.getGrad() == mon.getGrad())
			{
				pol.setElementAt(aux.sumarMon(mon),i);
				break;
			}
		}
		
		//Si i ha recorrido todo el polinomio y no ha encontrado 
		//monomio de igual grado, lo añade al final del polinomio
		if(i == pol.size()) 
			pol.addElement(mon);
		
	}
	
	public void sumarPol(Polinomio pol1,Polinomio pol2){
		//precondición: los dos polinomios tienen que estar creados
		int i,j;
		Monomio aux1,aux2;
		boolean[] SumadosPol2 = new boolean[pol2.tamanno()];// Este array almacena falso en la misma 
															//posicion de los monomios de pol2 que no han sido sumados aún.
		for(i=0;i<pol2.tamanno();i++)
			SumadosPol2[i]= false ; //Al principo no se ha sumado ningún monomio del pol2

		for (i=0; i < pol1.tamanno(); i++){
			aux1 = (Monomio) pol1.monomioEnPos(i);
			for (j=0; j < pol2.tamanno(); j++){
				aux2 = (Monomio) pol2.monomioEnPos(j);
				if(aux1.getGrad() == aux2.getGrad()){
					pol.addElement(aux1.sumarMon(aux2));
					SumadosPol2[j]= true; //Ponemos a verdadero los monomios de pol2 que acabamos de sumar
					break;
				}
			}
			
			if(j==pol2.tamanno())pol.addElement(aux1); //Se añaden al resultado el monomio i del pol1 no sumado con ningun monomio del pol2
		}
		
		//Añadimos todos los monomios no sumados del pol2 cuyos índices son recogidos por el vector SumadosPol2
		for(i=0;i<pol2.tamanno();i++){
			if (SumadosPol2[i]== false)
				pol.addElement(pol2.monomioEnPos(i));
		}
	}
	
	public void restarPol(Polinomio pol1,Polinomio pol2){
		//precondición: los dos polinomios tienen que estar creados
		int i,j;
		Monomio aux1,aux2;
		boolean[] RestadosPol2 = new boolean[pol2.tamanno()];// Este array almacena falso en la misma 
															//posicion de los monomios de pol2 que no han sido restados aún.
		for(i=0;i<pol2.tamanno();i++)
			RestadosPol2[i]= false ; //Al principo no se ha restado ningún monomio del pol2

		for (i=0; i < pol1.tamanno(); i++){
			aux1 = (Monomio) pol1.monomioEnPos(i);
			for (j=0; j < pol2.tamanno(); j++){
				aux2 = (Monomio) pol2.monomioEnPos(j);
				if(aux1.getGrad() == aux2.getGrad()){
					pol.addElement(aux1.restarMon(aux2));
					RestadosPol2[j]= true; //Ponemos a verdadero los monomios de pol2 que acabamos de restar
					break;
				}
			}
			
			if(j==pol2.tamanno())pol.addElement(aux1); //Se añaden al resultado el monomio i 
													  //del pol1 no restado con ningun monomio del pol2
		}
		
		//Añadimos todos los monomios no sumados del pol2 cuyos índices son recogidos por el vector SumadosPol2
		for(i=0;i<pol2.tamanno();i++){
			if (RestadosPol2[i]== false)
				pol.addElement(pol2.monomioEnPos(i).multiplicarEsc(-1));
			
		}
	}
		
	
	public void multiplicarPol(Polinomio pol1,Polinomio pol2){
		//precondición: los dos polinomios tienen que estar creados
		int i,j;
		Monomio aux1,aux2;
		for (i=0; i < pol1.tamanno(); i++){
			aux1 = (Monomio) pol1.monomioEnPos(i);
			for (j=0; j < pol2.tamanno(); j++){
				aux2 = (Monomio) pol2.monomioEnPos(j);
				this.annadirMonomio(aux1.multiplicarMon(aux2));
			}
		}
	}

	public void multiplicarEscalar(Polinomio pol1,int num){
		//precondición: el polinomio tiene que estar creado
		int i;
		Monomio aux1;
		for (i=0; i < pol1.tamanno(); i++){
			aux1 = (Monomio) pol1.monomioEnPos(i);
			pol.addElement(aux1.multiplicarEsc(num));
		}
	}
	
	public void mostrar(){
		int i;
		Monomio aux;
		for (i=0; i<pol.size(); i++){
			aux = (Monomio) this.monomioEnPos(i);
			System.out.print("("+aux.getCoef()+"x^"+aux.getGrad()+")");
			if(i!=this.tamanno()-1) System.out.print("+");
		}
	}
	
	public int tamanno(){
		return pol.size();
	}
	
	public Monomio monomioEnPos(int i){
		return (Monomio) pol.elementAt(i);
	}
	
	
}
